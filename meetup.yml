{
  # This is a holochain scaffold yaml definition. http://ceptr.org/projects/holochain

  # DNA File Version
  # Version indicator for changes to DNA
  "Version": "0.0.1",
  "Generator": "hc-scaffold:0.1.0+e8a394b",

  # Application DNA
  # The DNA specifies the entry structure and functions and configuration of your application
  "DNA": {

    # DNA File Version
    # Version indicator for changes to DNA
    "Version": 1,

    # DNA Unique ID
    # This ID differentiates your app from others. For example, to tell one Slack team from another which same code.
    "UUID": "25ca965f-b39c-4bc6-8eef-0a5329cf2b31",

    # Application Name
    # What would you like to call your holochain app?
    "Name": "Holo there meet Up",

    # Properties
    # Properties that you want available across all Zomes.
    "Properties": {

      # Application Description
      # Briefly describe your holochain app.
      "description": "A meetup clone. Federated for now, distributed eventually.",

      # Language
      # The base (human) language of this holochain app.
      "language": "en"
    },

    # Properties Schema File
    # Describes the entries in the Properties section of your dna file.
    "PropertiesSchemaFile": "properties_schema.json",

    # DHT Settings
    # Configure the properties of your Distributed Hash Table (e.g. hash algorithm, neighborhood size, etc.).
    "DHTConfig": {
      "HashType": "sha2-256"
    },

    # Zomes
    # List the Zomes your application will support.
    "Zomes": [
      {

        # Zome Name
        # The name of this code module.
        "Name": "meetup",

        # Zome Description
        # What is the purpose of this module?
        "Description": "models a holo meetup organization",

        # Ribosome Type
        # What scripting language will you code in?
        "RibosomeType": "js",

        # Code File
        # Points to the main script file for this Zome.
        "CodeFile": "meetup.js",

        # Zome Entries
        # Data stored and tracked by your Zome.
        "Entries": [
          {
            "Name": "group", # The name of this entry.
            "Required": true, # Is this entry required?
            "DataFormat": "json", # What type of data should this entry store?
            "Sharing": "public", # Should this entry be publicly accessible?
            "Schema": "{\n  \"$schema\": \"http://json-schema.org/draft-06/schema#\",\n  \"id\": \"http://example.com/meetup/group.json\",\n  \"type\": \"object\",\n  \"required\": [\n    \"name\",\n    \"tags\"\n  ],\n  \"properties\": {\n    \"name\": {\n      \"type\": \"string\",\n      \"pattern\": \".+\"\n    },\n    \"tags\": {\n      \"default\": [],\n      \"items\": {\n        \"type\": \"string\",\n        \"pattern\": \".+\"\n      },\n      \"type\": \"array\"\n    }\n  }\n}",
            "_": "cru"
          },
          {
            "Name": "event", # The name of this entry.
            "Required": true, # Is this entry required?
            "DataFormat": "json", # What type of data should this entry store?
            "Sharing": "public", # Should this entry be publicly accessible?
            "Schema": "{\n  \"$schema\": \"http://json-schema.org/draft-06/schema#\",\n  \"id\": \"http://example.com/meetup/event.json\",\n  \"type\": \"object\",\n  \"required\": [\n    \"name\"\n  ],\n  \"properties\": {\n    \"name\": {\n      \"type\": \"string\",\n      \"pattern\": \".+\"\n    },\n    \"date\": {\n      \"default\": \"\",\n      \"type\": \"string\",\n      \"pattern\": \".+\"\n    },\n    \"location\": {\n      \"default\": \"\",\n      \"type\": \"string\",\n      \"pattern\": \".+\"\n    },\n    \"tags\": {\n      \"default\": [],\n      \"items\": {\n        \"type\": \"string\",\n        \"pattern\": \".+\"\n      },\n      \"type\": \"array\"\n    }\n  }\n}",
            "_": "cru"
          },
          {
            "Name": "rsvp", # The name of this entry.
            "Required": true, # Is this entry required?
            "DataFormat": "json", # What type of data should this entry store?
            "Sharing": "public", # Should this entry be publicly accessible?
            "Schema": "{\n  \"$schema\": \"http://json-schema.org/draft-06/schema#\",\n  \"id\": \"http://example.com/meetup/rsvp.json\",\n  \"type\": \"object\",\n  \"required\": [\n    \"event\"\n  ],\n  \"properties\": {\n    \"attendees\": {\n      \"minimum\": 0,\n      \"default\": 1,\n      \"type\": \"integer\"\n    },\n    \"event\": {\n      \"type\": \"string\",\n      \"pattern\": \".+\"\n    },\n    \"ctime_iso8601_utc\": {\n      \"type\": \"string\",\n      \"pattern\": \".+\"\n    }\n  }\n}",
            "_": "crud"
          },
          {
            "Name": "user", # The name of this entry.
            "Required": true, # Is this entry required?
            "DataFormat": "json", # What type of data should this entry store?
            "Sharing": "public", # Should this entry be publicly accessible?
            "Schema": "{\n  \"$schema\": \"http://json-schema.org/draft-06/schema#\",\n  \"id\": \"http://example.com/meetup/user.json\",\n  \"type\": \"object\",\n  \"required\": [\n    \"name\",\n    \"email\"\n  ],\n  \"properties\": {\n    \"age\": {\n      \"maximum\": 120,\n      \"minimum\": 0,\n      \"default\": 0,\n      \"type\": \"integer\"\n    },\n    \"name\": {\n      \"type\": \"string\",\n      \"pattern\": \".+\"\n    },\n    \"email\": {\n      \"type\": \"string\",\n      \"pattern\": \".+\"\n    }\n  }\n}",
            "_": "cru"
          },
          {
            "Name": "event_links", # The name of this entry.
            "Required": true, # Is this entry required?
            "DataFormat": "links", # What type of data should this entry store?
            "Sharing": "public", # Should this entry be publicly accessible?
            "_": "-"
          },
          {
            "Name": "group_links", # The name of this entry.
            "Required": true, # Is this entry required?
            "DataFormat": "links", # What type of data should this entry store?
            "Sharing": "public", # Should this entry be publicly accessible?
            "_": "-"
          },
          {
            "Name": "user_links", # The name of this entry.
            "Required": true, # Is this entry required?
            "DataFormat": "links", # What type of data should this entry store?
            "Sharing": "public", # Should this entry be publicly accessible?
            "_": "-"
          }
        ],

        # Zome Functions
        # Functions which can be called in your Zome's API.
        "Functions": [
          {
            "Name": "groupCreate", # The name of this function.
            "CallingType": "json", # Data format for parameters passed to this function.
            "Exposure": "public", # Level to which is this function exposed.
            "_": "c:group"
          },
          {
            "Name": "groupRead", # The name of this function.
            "CallingType": "json", # Data format for parameters passed to this function.
            "Exposure": "public", # Level to which is this function exposed.
            "_": "r:group"
          },
          {
            "Name": "groupUpdate", # The name of this function.
            "CallingType": "json", # Data format for parameters passed to this function.
            "Exposure": "public", # Level to which is this function exposed.
            "_": "u:group"
          },
          {
            "Name": "eventCreate", # The name of this function.
            "CallingType": "json", # Data format for parameters passed to this function.
            "Exposure": "public", # Level to which is this function exposed.
            "_": "c:event"
          },
          {
            "Name": "eventRead", # The name of this function.
            "CallingType": "json", # Data format for parameters passed to this function.
            "Exposure": "public", # Level to which is this function exposed.
            "_": "r:event"
          },
          {
            "Name": "eventUpdate", # The name of this function.
            "CallingType": "json", # Data format for parameters passed to this function.
            "Exposure": "public", # Level to which is this function exposed.
            "_": "u:event"
          },
          {
            "Name": "rsvpCreate", # The name of this function.
            "CallingType": "json", # Data format for parameters passed to this function.
            "Exposure": "public", # Level to which is this function exposed.
            "_": "c:rsvp"
          },
          {
            "Name": "rsvpRead", # The name of this function.
            "CallingType": "json", # Data format for parameters passed to this function.
            "Exposure": "public", # Level to which is this function exposed.
            "_": "r:rsvp"
          },
          {
            "Name": "rsvpUpdate", # The name of this function.
            "CallingType": "json", # Data format for parameters passed to this function.
            "Exposure": "public", # Level to which is this function exposed.
            "_": "u:rsvp"
          },
          {
            "Name": "rsvpDelete", # The name of this function.
            "CallingType": "json", # Data format for parameters passed to this function.
            "Exposure": "public", # Level to which is this function exposed.
            "_": "d:rsvp"
          },
          {
            "Name": "userCreate", # The name of this function.
            "CallingType": "json", # Data format for parameters passed to this function.
            "Exposure": "public", # Level to which is this function exposed.
            "_": "c:user"
          },
          {
            "Name": "userRead", # The name of this function.
            "CallingType": "json", # Data format for parameters passed to this function.
            "Exposure": "public", # Level to which is this function exposed.
            "_": "r:user"
          },
          {
            "Name": "userUpdate", # The name of this function.
            "CallingType": "json", # Data format for parameters passed to this function.
            "Exposure": "public", # Level to which is this function exposed.
            "_": "u:user"
          },
          {
            "Name": "hostGroup", # The name of this function.
            "CallingType": "string", # Data format for parameters passed to this function.
            "Exposure": "public", # Level to which is this function exposed.
          },
          {
            "Name": "hostEvent", # The name of this function.
            "CallingType": "json", # Data format for parameters passed to this function.
            "Exposure": "public", # Level to which is this function exposed.
          },
          {
            "Name": "listEventsByTag", # The name of this function.
            "CallingType": "string", # Data format for parameters passed to this function.
            "Exposure": "public", # Level to which is this function exposed.
          }
        ],

        # Zome Source Code
        # The logic that will control Zome behavior
        "Code": "'use strict';\n\n// -----------------------------------------------------------------\n//  This stub Zome code file was auto-generated by hc-scaffold\n// -----------------------------------------------------------------\n\n// -----------------------------------------------------------------\n//  Exposed functions with custom logic https://developer.holochain.org/API_reference\n// -----------------------------------------------------------------\n\nfunction groupCreate (groupEntry) {\n  var groupHash = commit(\"group\", groupEntry);\n  return groupHash;\n}\n\nfunction groupRead (groupHash) {\n  var group = get(groupHash);\n  return group;\n}\n\nfunction groupUpdate (groupHash) {\n  var sampleValue={\"name\":\"a string\",\"tags\":[\"a string\"],\"extraField\":true};\n  var groupOutHash = update(\"group\", sampleValue, groupHash);\n  return groupOutHash;\n}\n\nfunction eventCreate (eventEntry) {\n  var eventHash = commit(\"event\", eventEntry);\n  return eventHash;\n}\n\nfunction eventRead (eventHash) {\n  var event = get(eventHash);\n  return event;\n}\n\nfunction eventUpdate (eventHash) {\n  var sampleValue={\"name\":\"a string\",\"date\":\"a string\",\"location\":\"a string\",\"tags\":[\"a string\"],\"extraField\":true};\n  var eventOutHash = update(\"event\", sampleValue, eventHash);\n  return eventOutHash;\n}\n\nfunction rsvpCreate (rsvpEntry) {\n  var rsvpHash = commit(\"rsvp\", rsvpEntry);\n  return rsvpHash;\n}\n\nfunction rsvpRead (rsvpHash) {\n  var rsvp = get(rsvpHash);\n  return rsvp;\n}\n\nfunction rsvpUpdate (rsvpHash) {\n  var sampleValue={\"attendees\":0,\"event\":\"a string\",\"ctime_iso8601_utc\":\"a string\",\"extraField\":true};\n  var rsvpOutHash = update(\"rsvp\", sampleValue, rsvpHash);\n  return rsvpOutHash;\n}\n\nfunction rsvpDelete (rsvpHash) {\n  var result = remove(rsvpHash, \"\");\n  return result;\n}\n\nfunction userCreate (userEntry) {\n  var userHash = commit(\"user\", userEntry);\n  return userHash;\n}\n\nfunction userRead (userHash) {\n  var user = get(userHash);\n  return user;\n}\n\nfunction userUpdate (userHash) {\n  var sampleValue={\"age\":0,\"name\":\"a string\",\"email\":\"a string\",\"extraField\":true};\n  var userOutHash = update(\"user\", sampleValue, userHash);\n  return userOutHash;\n}\n\nfunction hostGroup (text) {\n  // your custom code here\n  return \"a string\";\n}\n\nfunction hostEvent (params) {\n  // your custom code here\n  return {};\n}\n\nfunction listEventsByTag (text) {\n  // your custom code here\n  return \"a string\";\n}\n\n\n// -----------------------------------------------------------------\n//  The Genesis Function https://developer.holochain.org/genesis\n// -----------------------------------------------------------------\n\n/**\n * Called only when your source chain is generated\n * @return {boolean} success\n */\nfunction genesis () {\n  return true;\n}\n\n// -----------------------------------------------------------------\n//  Validation functions for every change to the local chain or DHT\n// -----------------------------------------------------------------\n\n/**\n * Called to validate any changes to the local chain or DHT\n * @param {string} entryName - the type of entry\n * @param {*} entry - the entry data to be set\n * @param {object} header - header for the entry containing properties EntryLink, Time, and Type\n * @param {*} pkg - the extra data provided by the validate[X]Pkg methods\n * @param {object} sources - an array of strings containing the keys of any authors of this entry\n * @return {boolean} is valid?\n */\nfunction validateCommit (entryName, entry, header, pkg, sources) {\n  switch (entryName) {\n    case \"group\":\n      // be sure to consider many edge cases for validating\n      // do not just flip this to true without considering what that means\n      // the action will ONLY be successfull if this returns true, so watch out!\n      return false;\n    case \"event\":\n      // be sure to consider many edge cases for validating\n      // do not just flip this to true without considering what that means\n      // the action will ONLY be successfull if this returns true, so watch out!\n      return false;\n    case \"rsvp\":\n      // be sure to consider many edge cases for validating\n      // do not just flip this to true without considering what that means\n      // the action will ONLY be successfull if this returns true, so watch out!\n      return false;\n    case \"user\":\n      // be sure to consider many edge cases for validating\n      // do not just flip this to true without considering what that means\n      // the action will ONLY be successfull if this returns true, so watch out!\n      return false;\n    case \"event_links\":\n      // be sure to consider many edge cases for validating\n      // do not just flip this to true without considering what that means\n      // the action will ONLY be successfull if this returns true, so watch out!\n      return false;\n    case \"group_links\":\n      // be sure to consider many edge cases for validating\n      // do not just flip this to true without considering what that means\n      // the action will ONLY be successfull if this returns true, so watch out!\n      return false;\n    case \"user_links\":\n      // be sure to consider many edge cases for validating\n      // do not just flip this to true without considering what that means\n      // the action will ONLY be successfull if this returns true, so watch out!\n      return false;\n    default:\n      // invalid entry name\n      return false;\n  }\n}\n\n/**\n * Called to validate any changes to the local chain or DHT\n * @param {string} entryName - the type of entry\n * @param {*} entry - the entry data to be set\n * @param {object} header - header for the entry containing properties EntryLink, Time, and Type\n * @param {*} pkg - the extra data provided by the validate[X]Pkg methods\n * @param {object} sources - an array of strings containing the keys of any authors of this entry\n * @return {boolean} is valid?\n */\nfunction validatePut (entryName, entry, header, pkg, sources) {\n  switch (entryName) {\n    case \"group\":\n      // be sure to consider many edge cases for validating\n      // do not just flip this to true without considering what that means\n      // the action will ONLY be successfull if this returns true, so watch out!\n      return false;\n    case \"event\":\n      // be sure to consider many edge cases for validating\n      // do not just flip this to true without considering what that means\n      // the action will ONLY be successfull if this returns true, so watch out!\n      return false;\n    case \"rsvp\":\n      // be sure to consider many edge cases for validating\n      // do not just flip this to true without considering what that means\n      // the action will ONLY be successfull if this returns true, so watch out!\n      return false;\n    case \"user\":\n      // be sure to consider many edge cases for validating\n      // do not just flip this to true without considering what that means\n      // the action will ONLY be successfull if this returns true, so watch out!\n      return false;\n    case \"event_links\":\n      // be sure to consider many edge cases for validating\n      // do not just flip this to true without considering what that means\n      // the action will ONLY be successfull if this returns true, so watch out!\n      return false;\n    case \"group_links\":\n      // be sure to consider many edge cases for validating\n      // do not just flip this to true without considering what that means\n      // the action will ONLY be successfull if this returns true, so watch out!\n      return false;\n    case \"user_links\":\n      // be sure to consider many edge cases for validating\n      // do not just flip this to true without considering what that means\n      // the action will ONLY be successfull if this returns true, so watch out!\n      return false;\n    default:\n      // invalid entry name\n      return false;\n  }\n}\n\n/**\n * Called to validate any changes to the local chain or DHT\n * @param {string} entryName - the type of entry\n * @param {*} entry - the entry data to be set\n * @param {object} header - header for the entry containing properties EntryLink, Time, and Type\n * @param {string} replaces - the hash for the entry being updated\n * @param {*} pkg - the extra data provided by the validate[X]Pkg methods\n * @param {object} sources - an array of strings containing the keys of any authors of this entry\n * @return {boolean} is valid?\n */\nfunction validateMod (entryName, entry, header, replaces, pkg, sources) {\n  switch (entryName) {\n    case \"group\":\n      // be sure to consider many edge cases for validating\n      // do not just flip this to true without considering what that means\n      // the action will ONLY be successfull if this returns true, so watch out!\n      return false;\n    case \"event\":\n      // be sure to consider many edge cases for validating\n      // do not just flip this to true without considering what that means\n      // the action will ONLY be successfull if this returns true, so watch out!\n      return false;\n    case \"rsvp\":\n      // be sure to consider many edge cases for validating\n      // do not just flip this to true without considering what that means\n      // the action will ONLY be successfull if this returns true, so watch out!\n      return false;\n    case \"user\":\n      // be sure to consider many edge cases for validating\n      // do not just flip this to true without considering what that means\n      // the action will ONLY be successfull if this returns true, so watch out!\n      return false;\n    case \"event_links\":\n      // be sure to consider many edge cases for validating\n      // do not just flip this to true without considering what that means\n      // the action will ONLY be successfull if this returns true, so watch out!\n      return false;\n    case \"group_links\":\n      // be sure to consider many edge cases for validating\n      // do not just flip this to true without considering what that means\n      // the action will ONLY be successfull if this returns true, so watch out!\n      return false;\n    case \"user_links\":\n      // be sure to consider many edge cases for validating\n      // do not just flip this to true without considering what that means\n      // the action will ONLY be successfull if this returns true, so watch out!\n      return false;\n    default:\n      // invalid entry name\n      return false;\n  }\n}\n\n/**\n * Called to validate any changes to the local chain or DHT\n * @param {string} entryName - the type of entry\n * @param {string} hash - the hash of the entry to remove\n * @param {*} pkg - the extra data provided by the validate[X]Pkg methods\n * @param {object} sources - an array of strings containing the keys of any authors of this entry\n * @return {boolean} is valid?\n */\nfunction validateDel (entryName, hash, pkg, sources) {\n  switch (entryName) {\n    case \"group\":\n      // be sure to consider many edge cases for validating\n      // do not just flip this to true without considering what that means\n      // the action will ONLY be successfull if this returns true, so watch out!\n      return false;\n    case \"event\":\n      // be sure to consider many edge cases for validating\n      // do not just flip this to true without considering what that means\n      // the action will ONLY be successfull if this returns true, so watch out!\n      return false;\n    case \"rsvp\":\n      // be sure to consider many edge cases for validating\n      // do not just flip this to true without considering what that means\n      // the action will ONLY be successfull if this returns true, so watch out!\n      return false;\n    case \"user\":\n      // be sure to consider many edge cases for validating\n      // do not just flip this to true without considering what that means\n      // the action will ONLY be successfull if this returns true, so watch out!\n      return false;\n    case \"event_links\":\n      // be sure to consider many edge cases for validating\n      // do not just flip this to true without considering what that means\n      // the action will ONLY be successfull if this returns true, so watch out!\n      return false;\n    case \"group_links\":\n      // be sure to consider many edge cases for validating\n      // do not just flip this to true without considering what that means\n      // the action will ONLY be successfull if this returns true, so watch out!\n      return false;\n    case \"user_links\":\n      // be sure to consider many edge cases for validating\n      // do not just flip this to true without considering what that means\n      // the action will ONLY be successfull if this returns true, so watch out!\n      return false;\n    default:\n      // invalid entry name\n      return false;\n  }\n}\n\n/**\n * Called to validate any changes to the local chain or DHT\n * @param {string} entryName - the type of entry\n * @param {string} baseHash - the hash of the base entry being linked\n * @param {?} links - ?\n * @param {*} pkg - the extra data provided by the validate[X]Pkg methods\n * @param {object} sources - an array of strings containing the keys of any authors of this entry\n * @return {boolean} is valid?\n */\nfunction validateLink (entryName, baseHash, links, pkg, sources) {\n  switch (entryName) {\n    case \"group\":\n      // be sure to consider many edge cases for validating\n      // do not just flip this to true without considering what that means\n      // the action will ONLY be successfull if this returns true, so watch out!\n      return false;\n    case \"event\":\n      // be sure to consider many edge cases for validating\n      // do not just flip this to true without considering what that means\n      // the action will ONLY be successfull if this returns true, so watch out!\n      return false;\n    case \"rsvp\":\n      // be sure to consider many edge cases for validating\n      // do not just flip this to true without considering what that means\n      // the action will ONLY be successfull if this returns true, so watch out!\n      return false;\n    case \"user\":\n      // be sure to consider many edge cases for validating\n      // do not just flip this to true without considering what that means\n      // the action will ONLY be successfull if this returns true, so watch out!\n      return false;\n    case \"event_links\":\n      // be sure to consider many edge cases for validating\n      // do not just flip this to true without considering what that means\n      // the action will ONLY be successfull if this returns true, so watch out!\n      return false;\n    case \"group_links\":\n      // be sure to consider many edge cases for validating\n      // do not just flip this to true without considering what that means\n      // the action will ONLY be successfull if this returns true, so watch out!\n      return false;\n    case \"user_links\":\n      // be sure to consider many edge cases for validating\n      // do not just flip this to true without considering what that means\n      // the action will ONLY be successfull if this returns true, so watch out!\n      return false;\n    default:\n      // invalid entry name\n      return false;\n  }\n}\n\n/**\n * Called to get the data needed to validate\n * @param {string} entryName - the name of entry to validate\n * @return {*} the data required for validation\n */\nfunction validatePutPkg (entryName) {\n  return null;\n}\n\n/**\n * Called to get the data needed to validate\n * @param {string} entryName - the name of entry to validate\n * @return {*} the data required for validation\n */\nfunction validateModPkg (entryName) {\n  return null;\n}\n\n/**\n * Called to get the data needed to validate\n * @param {string} entryName - the name of entry to validate\n * @return {*} the data required for validation\n */\nfunction validateDelPkg (entryName) {\n  return null;\n}\n\n/**\n * Called to get the data needed to validate\n * @param {string} entryName - the name of entry to validate\n * @return {*} the data required for validation\n */\nfunction validateLinkPkg (entryName) {\n  return null;\n}"
      }
    ]
  },

  # TestSets
  # Auto-Generated test sets for hcdev package
  "TestSets": [
    {

      # Name
      # Name of the Test Set
      "Name": "meetup",
      "TestSet": {
        "Tests": [
          {

            # Convey
            # Description of this test
            "Convey": "auto-generated test for groupCreate",

            # Zome
            # The zome this test is related to
            "Zome": "meetup",

            # Function Name
            # The function to test
            "FnName": "groupCreate",

            # Input
            # Input sent to the function
            "Input": {
              "name": "a string",
              "tags": [
                "a string"
              ]
            },

            # Output
            # Output from the function to validate
            "Output": "%h%"
          },
          {

            # Convey
            # Description of this test
            "Convey": "auto-generated test for groupRead",

            # Zome
            # The zome this test is related to
            "Zome": "meetup",

            # Function Name
            # The function to test
            "FnName": "groupRead",

            # Input
            # Input sent to the function
            "Input": "%h%",

            # Output
            # Output from the function to validate
            "Output": {
              "name": "a string",
              "tags": [
                "a string"
              ]
            }
          },
          {

            # Convey
            # Description of this test
            "Convey": "auto-generated test for groupUpdate",

            # Zome
            # The zome this test is related to
            "Zome": "meetup",

            # Function Name
            # The function to test
            "FnName": "groupUpdate",

            # Input
            # Input sent to the function
            "Input": "%h%",

            # Output
            # Output from the function to validate
            "Output": "%h%"
          },
          {

            # Convey
            # Description of this test
            "Convey": "auto-generated test for eventCreate",

            # Zome
            # The zome this test is related to
            "Zome": "meetup",

            # Function Name
            # The function to test
            "FnName": "eventCreate",

            # Input
            # Input sent to the function
            "Input": {
              "name": "a string",
              "date": "a string",
              "location": "a string",
              "tags": [
                "a string"
              ]
            },

            # Output
            # Output from the function to validate
            "Output": "%h%"
          },
          {

            # Convey
            # Description of this test
            "Convey": "auto-generated test for eventRead",

            # Zome
            # The zome this test is related to
            "Zome": "meetup",

            # Function Name
            # The function to test
            "FnName": "eventRead",

            # Input
            # Input sent to the function
            "Input": "%h%",

            # Output
            # Output from the function to validate
            "Output": {
              "name": "a string",
              "date": "a string",
              "location": "a string",
              "tags": [
                "a string"
              ]
            }
          },
          {

            # Convey
            # Description of this test
            "Convey": "auto-generated test for eventUpdate",

            # Zome
            # The zome this test is related to
            "Zome": "meetup",

            # Function Name
            # The function to test
            "FnName": "eventUpdate",

            # Input
            # Input sent to the function
            "Input": "%h%",

            # Output
            # Output from the function to validate
            "Output": "%h%"
          },
          {

            # Convey
            # Description of this test
            "Convey": "auto-generated test for rsvpCreate",

            # Zome
            # The zome this test is related to
            "Zome": "meetup",

            # Function Name
            # The function to test
            "FnName": "rsvpCreate",

            # Input
            # Input sent to the function
            "Input": {
              "attendees": 0,
              "event": "a string",
              "ctime_iso8601_utc": "a string"
            },

            # Output
            # Output from the function to validate
            "Output": "%h%"
          },
          {

            # Convey
            # Description of this test
            "Convey": "auto-generated test for rsvpRead",

            # Zome
            # The zome this test is related to
            "Zome": "meetup",

            # Function Name
            # The function to test
            "FnName": "rsvpRead",

            # Input
            # Input sent to the function
            "Input": "%h%",

            # Output
            # Output from the function to validate
            "Output": {
              "attendees": 0,
              "event": "a string",
              "ctime_iso8601_utc": "a string"
            }
          },
          {

            # Convey
            # Description of this test
            "Convey": "auto-generated test for rsvpUpdate",

            # Zome
            # The zome this test is related to
            "Zome": "meetup",

            # Function Name
            # The function to test
            "FnName": "rsvpUpdate",

            # Input
            # Input sent to the function
            "Input": "%h%",

            # Output
            # Output from the function to validate
            "Output": "%h%"
          },
          {

            # Convey
            # Description of this test
            "Convey": "auto-generated test for rsvpDelete",

            # Zome
            # The zome this test is related to
            "Zome": "meetup",

            # Function Name
            # The function to test
            "FnName": "rsvpDelete",

            # Input
            # Input sent to the function
            "Input": "%h%",

            # Output
            # Output from the function to validate
            "Output": "%h%"
          },
          {

            # Convey
            # Description of this test
            "Convey": "auto-generated test for userCreate",

            # Zome
            # The zome this test is related to
            "Zome": "meetup",

            # Function Name
            # The function to test
            "FnName": "userCreate",

            # Input
            # Input sent to the function
            "Input": {
              "age": 0,
              "name": "a string",
              "email": "a string"
            },

            # Output
            # Output from the function to validate
            "Output": "%h%"
          },
          {

            # Convey
            # Description of this test
            "Convey": "auto-generated test for userRead",

            # Zome
            # The zome this test is related to
            "Zome": "meetup",

            # Function Name
            # The function to test
            "FnName": "userRead",

            # Input
            # Input sent to the function
            "Input": "%h%",

            # Output
            # Output from the function to validate
            "Output": {
              "age": 0,
              "name": "a string",
              "email": "a string"
            }
          },
          {

            # Convey
            # Description of this test
            "Convey": "auto-generated test for userUpdate",

            # Zome
            # The zome this test is related to
            "Zome": "meetup",

            # Function Name
            # The function to test
            "FnName": "userUpdate",

            # Input
            # Input sent to the function
            "Input": "%h%",

            # Output
            # Output from the function to validate
            "Output": "%h%"
          },
          {

            # Convey
            # Description of this test
            "Convey": "auto-generated test for hostGroup",

            # Zome
            # The zome this test is related to
            "Zome": "meetup",

            # Function Name
            # The function to test
            "FnName": "hostGroup",

            # Input
            # Input sent to the function
            "Input": "",

            # Output
            # Output from the function to validate
            "Output": "a string"
          },
          {

            # Convey
            # Description of this test
            "Convey": "auto-generated test for hostEvent",

            # Zome
            # The zome this test is related to
            "Zome": "meetup",

            # Function Name
            # The function to test
            "FnName": "hostEvent",

            # Input
            # Input sent to the function
            "Input": "",

            # Output
            # Output from the function to validate
            "Output": {}
          },
          {

            # Convey
            # Description of this test
            "Convey": "auto-generated test for listEventsByTag",

            # Zome
            # The zome this test is related to
            "Zome": "meetup",

            # Function Name
            # The function to test
            "FnName": "listEventsByTag",

            # Input
            # Input sent to the function
            "Input": "",

            # Output
            # Output from the function to validate
            "Output": "a string"
          }
        ]
      }
    }
  ]
}